{
  "testConfig": [
    {
      "route": "/proxy/event-subscriptions",
      "variants": {
        "POST": [
          {
            "httpCode": 201,
            "description": "POST /event-subscriptions response with additional enum",
            "category": "Backward compatibility check",
            "resDecorator": {
              "patch": {
                "eventType": [
                  "DUMMY"
                ]
              }
            }
          },
          {
            "httpCode": 201,
            "description": "POST /event-subscriptions with optional field",
            "category": "Backward compatibility check",
            "resDecorator": {
              "patch": {
                "DummyField": "DummyValue"
              }
            }
          },
          {
            "id": "response-5",
            "httpCode": 400,
            "description": "POST /event-subscriptions with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "BadRequest",
                  "message": "No EventSubscription was found with id"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request"
              }
            }
          }
        ],
        "GET": [
          {
            "id": "response-1",
            "httpCode": 200,
            "description": "GET /event-subscriptions check with additional enum",
            "category": "Backward compatibility Check",
            "resDecorator": {
              "header": {
                "API-Version": "2.2.0"
              },
              "patch": {
                "eventType": [
                  "DUMMY"
                ]
              }
            }
          },
          {
            "id": "response-2",
            "httpCode": 400,
            "description": "GET /event-subscriptions with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "httpMethod": "GET",
                "requestUri": "http://127.0.0.1:9090/v2/proxy/event-subscriptions/9729a5a2-d0d9-4a9a-a7d0-280033349821",
                "errors": {
                  "reason": "BadRequest",
                  "message": "No EventSubscription was found with id: 9729a5a2-d0d9-4a9a-a7d0-280033349821"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request",
                "errorDateTime": "2019-11-12T07:41:00+08:30"
              }
            }
          }
        ]
      }
    },
    {
      "route": "/proxy/event-subscriptions/{id}",
      "variants": {
        "PUT": [
          {
            "id": "response-1",
            "httpCode": 201,
            "description": "PUT /event-subscriptions",
            "category": "Update a subscription"
          },
          {
            "id": "response-2",
            "httpCode": 201,
            "description": "PUT /event-subscriptions with additional enum",
            "category": "Backward compatibility Check",
            "resDecorator": {
              "header": {
                "API-Version": "2.2.0"
              },
              "patch": {
                "eventType": [
                  "DUMMY"
                ]
              }
            }
          },
          {
            "id": "response-3",
            "httpCode": 201,
            "description": "PUT /event-subscriptions with optional field",
            "category": "Backward compatibility Check",
            "resDecorator": {
              "header": {
                "API-Version": "2.2.0"
              },
              "patch": {
                "DummyField": "DummyValue"
              }
            }
          },
          {
            "id": "response-5",
            "httpCode": 400,
            "description": "PUT /event-subscriptions with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "BadRequest",
                  "message": "Bad request"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request"
              }
            }
          },
          {
            "id": "response-6",
            "httpCode": 404,
            "description": "PUT /event-subscriptions with httpCode 404",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "NotFound",
                  "message": "No EventSubscription was found with id"
                },
                "statusCode": 404,
                "statusCodeText": "NotFound"
              }
            }
          }
        ],
        "GET": [
          {
            "id": "response-1",
            "httpCode": 200,
            "description": "GET /event-subscriptions/{id} with additional enum",
            "category": "Backward compatibility Check",
            "resDecorator": {
              "header": {
                "API-Version": "2.2.0"
              },
              "patch": {
                "eventType": [
                  "DUMMY"
                ]
              }
            }
          },
          {
            "id": "response-2",
            "httpCode": 400,
            "description": "GET /event-subscriptions/{id} with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "BadRequest",
                  "message": "No EventSubscription was found"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request"
              }
            }
          }
        ],
        "DELETE": [
          {
            "id": "response-1",
            "httpCode": 200,
            "description": "DELETE /event-subscriptions",
            "category": "Delete Subscription"
          },
          {
            "id": "response-2",
            "httpCode": 400,
            "description": "POST /event-subscriptions with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "BadRequest",
                  "message": "No EventSubscription was found"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request"
              }
            }
          }
        ]
      }
    },
    {
      "route": "/proxy/event-subscriptions/{id}/secret",
      "variants": {
        "PUT": [
          {
            "id": "response-1",
            "httpCode": 201,
            "description": "PUT /event-subscriptions/{id}/secret",
            "category": "Rotate Secret"
          },
          {
            "id": "response-2",
            "httpCode": 400,
            "description": "PUT /event-subscriptions with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "BadRequest",
                  "message": "Bad request"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request"
              }
            }
          },
          {
            "id": "response-3",
            "httpCode": 404,
            "description": "PUT /event-subscriptions with httpCode 404",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "NotFound",
                  "message": "Not Found"
                },
                "statusCode": 404,
                "statusCodeText": "Not Found"
              }
            }
          }
        ]
      }
    },
    {
      "route": "/proxy/events",
      "variants": {
        "GET": [
          {
            "httpCode": 200,
            "description": "GET /events request with Query Parameters eventType",
            "category": "Query parameter check",
            "requestMatcher": {
              "queryParameter": [
                "eventType"
              ]
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events response with optional field",
            "category": "Backward compatibility check",
            "resDecorator": {
              "patch": {
                "DummyField": "DummyValue"
              }
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events response with timeStamp without millisecond",
            "category": "Different timeStamp format",
            "resDecorator": {
              "format": {
                "date": {
                  "eventCreatedDateTime": "yyyy-MM-dd'T'HH:mm:ss",
                  "eventDateTime": "yyyy-MM-dd'T'HH:mm:ss"
                }
              }
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events response with timeStamp with millisecond",
            "category": "Different timeStamp format",
            "resDecorator": {
              "format": {
                "date": {
                  "eventCreatedDateTime": "yyyy-MM-dd'T'HH:mm:ss:SSS",
                  "eventDateTime": "yyyy-MM-dd'T'HH:mm:ss:SSS"
                }
              }
            }
          },
          {
            "httpCode": 400,
            "description": "GET /events with httpCode 400",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "BadRequest",
                  "message": "Bad request"
                },
                "statusCode": 400,
                "statusCodeText": "Bad request"
              }
            }
          },
          {
            "httpCode": 500,
            "description": "GET /events with httpCode 500",
            "category": "Error/Exception Handling",
            "resDecorator": {
              "patch": {
                "errors": {
                  "reason": "InternalServerError",
                  "message": "Internal Server Error"
                },
                "statusCode": 500,
                "statusCodeText": "Internal Server Error"
              }
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events with sorting parameter",
            "category": "Request with sorting parameter",
            "requestMatcher": {
              "queryParameter": [
                "sort"
              ]
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events with limit parameter",
            "category": "Request with limit parameter",
            "requestMatcher": {
              "queryParameter": [
                "limit"
              ]
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events with cursor parameter",
            "category": "Request with cursor parameter",
            "requestMatcher": {
              "queryParameter": [
                "cursor"
              ]
            }
          },
          {
            "httpCode": 200,
            "description": "GET /events with header API-Version",
            "category": "Request with header API-Version",
            "requestMatcher": {
              "header": [
                "API-Version"
              ]
            }
          }
        ]
      }
    }
  ]
}